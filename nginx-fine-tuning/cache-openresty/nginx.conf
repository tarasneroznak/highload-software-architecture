events {
    worker_connections 1024;
}

http {
    lua_package_path "/path/to/lua/?.lua;;";
    
    lua_shared_dict images_cache 100m;
    lua_shared_dict access_count 100m;

    server {
        listen 80;
        listen [::]:80;
        server_name localhost;

        location / {
            content_by_lua_block {
                local cache = ngx.shared.images_cache
                local cache_key = ngx.var.request_uri
                local cached_data = cache:get(cache_key)
                if cached_data then
                    ngx.say(cached_data)
                else
                    local res = ngx.location.capture(string.format("/object-storage%s", ngx.var.request_uri))
                    if res.status == ngx.HTTP_OK then
                        cache:set(cache_key, res.body, 3600)
                        ngx.say(res.body)
                    else
                        ngx.say(res.status)
                    end
                end
            }
        }

        location /purge {
            content_by_lua_block {
                local cache = ngx.shared.images_cache
                local cache_key = ngx.var.request_uri
                cache:delete(cache_key)
                ngx.say(cache_key)
            }
        }

        location /object-storage {
            add_header X-PROXY-CACHE $upstream_cache_status;
            rewrite ^/object-storage(.*) $1 break;
            proxy_pass http://object_storage:8081;
        }
    }
}
